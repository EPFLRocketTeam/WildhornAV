/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2022 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp157.dtsi"
#include "stm32mp15xd.dtsi"
#include "stm32mp15xxab-pinctrl.dtsi"
#include "stm32mp15-m4-srm.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/mfd/st,stpmic1.h>
/* USER CODE END includes */

/ {
	model = "STMicroelectronics custom STM32CubeMX board - openstlinux-5.10-dunfell-mp1-21-03-31";
	compatible = "st,stm32mp157d-wildhornav-mx", "st,stm32mp157";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */
		
		mcuram2:mcuram2@10000000{
			compatible = "shared-dma-pool";
			reg = <0x10000000 0x40000>;
			no-map;
		};

		vdev0vring0:vdev0vring0@10040000{
			compatible = "shared-dma-pool";
			reg = <0x10040000 0x1000>;
			no-map;
		};

		vdev0vring1:vdev0vring1@10041000{
			compatible = "shared-dma-pool";
			reg = <0x10041000 0x1000>;
			no-map;
		};

		vdev0buffer:vdev0buffer@10042000{
			compatible = "shared-dma-pool";
			reg = <0x10042000 0x4000>;
			no-map;
		};

		mcuram:mcuram@30000000{
			compatible = "shared-dma-pool";
			reg = <0x30000000 0x40000>;
			no-map;
		};

		retram:retram@38000000{
			compatible = "shared-dma-pool";
			reg = <0x38000000 0x10000>;
			no-map;
		};

		gpu_reserved:gpu@d4000000{
			reg = <0xd4000000 0x4000000>;
			no-map;
		};
		
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */
	
	aliases{
		ethernet0 = &ethernet0;
		serial0 = &uart8;
		serial1 = &usart2;
		serial2 = &usart3;
		serial3 = &usart6;
	};
	
	chosen{
		stdout-path = "serial0:115200n8";
	};

	vin:vin{
		compatible = "regulator-fixed";
		regulator-name = "vin";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	
//	led{
//		compatible = "gpio-leds";
//
//		led-blue{
//			label = "heartbeat";
//			gpios = <&gpioc 6 GPIO_ACTIVE_LOW>;
//			linux,default-trigger = "heartbeat";
//			default-state = "off";
//		};
//	};
	
	usb_phy_tuning:usb-phy-tuning{
		st,hs-dc-level = <2>;
		st,fs-rftime-tuning;
		st,hs-rftime-reduction;
		st,hs-current-trim = <15>;
		st,hs-impedance-trim = <1>;
		st,squelch-level = <3>;
		st,hs-rx-offset = <2>;
		st,no-lsfs-sc;
	};
		
	/* USER CODE END root */

	clocks {
		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */

#ifndef CONFIG_TFABOOT
		clk_lsi: clk-lsi {
			clock-frequency = <32000>;
		};
		clk_hsi: clk-hsi {
			clock-frequency = <64000000>;
		};
		clk_csi: clk-csi {
			clock-frequency = <4000000>;
		};
		clk_lse: clk-lse {
			clock-frequency = <32768>;
		};
		clk_hse: clk-hse {
			clock-frequency = <24000000>;
		};
#endif	/*CONFIG_TFABOOT*/
	};

}; /*root*/

&pinctrl {
	u-boot,dm-pre-reloc;

	i2c4_pins_mx: i2c4_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 7, AF6)>, /* I2C4_SDA */
					 <STM32_PINMUX('B', 8, AF6)>; /* I2C4_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <3>;
		};
	};

	i2c4_sleep_pins_mx: i2c4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 7, ANALOG)>, /* I2C4_SDA */
					 <STM32_PINMUX('B', 8, ANALOG)>; /* I2C4_SCL */
		};
	};

	m4_adc_pins_mx: m4_adc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 7, ANALOG)>, /* ADC1_INP7 */
					 <STM32_PINMUX('C', 0, ANALOG)>, /* ADC1_INP10 */
					 <STM32_PINMUX('C', 3, ANALOG)>, /* ADC1_INP13 */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ADC1_INP4 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ADC1_INP8 */
					 <STM32_PINMUX('F', 11, ANALOG)>; /* ADC1_INP2 */
		};
	};

	m4_dac1_pins_mx: m4_dac1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 4, ANALOG)>; /* DAC1_OUT1 */
		};
	};

	m4_fdcan1_pins_mx: m4_fdcan1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 11, RSVD)>, /* FDCAN1_RX */
					 <STM32_PINMUX('A', 12, RSVD)>; /* FDCAN1_TX */
		};
	};

	m4_fdcan2_pins_mx: m4_fdcan2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 12, RSVD)>, /* FDCAN2_RX */
					 <STM32_PINMUX('B', 13, RSVD)>; /* FDCAN2_TX */
		};
	};

	m4_i2c1_pins_mx: m4_i2c1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 9, RSVD)>, /* I2C1_SDA */
					 <STM32_PINMUX('D', 12, RSVD)>; /* I2C1_SCL */
		};
	};

	m4_i2c2_pins_mx: m4_i2c2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 7, RSVD)>, /* I2C2_SCL */
					 <STM32_PINMUX('G', 15, RSVD)>; /* I2C2_SDA */
		};
	};

	m4_i2c5_pins_mx: m4_i2c5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 0, RSVD)>, /* I2C5_SDA */
					 <STM32_PINMUX('D', 1, RSVD)>; /* I2C5_SCL */
		};
	};

	m4_spi1_pins_mx: m4_spi1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 5, RSVD)>, /* SPI1_SCK */
					 <STM32_PINMUX('A', 6, RSVD)>, /* SPI1_MISO */
					 <STM32_PINMUX('B', 5, RSVD)>; /* SPI1_MOSI */
		};
	};

	m4_spi2_pins_mx: m4_spi2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 9, RSVD)>, /* SPI2_SCK */
					 <STM32_PINMUX('B', 15, RSVD)>, /* SPI2_MOSI */
					 <STM32_PINMUX('C', 2, RSVD)>; /* SPI2_MISO */
		};
	};

	m4_spi3_pins_mx: m4_spi3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 8, RSVD)>, /* SPI3_MOSI */
					 <STM32_PINMUX('C', 10, RSVD)>, /* SPI3_SCK */
					 <STM32_PINMUX('D', 10, RSVD)>; /* SPI3_MISO */
		};
	};

	m4_tim3_pins_mx: m4_tim3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 1, RSVD)>; /* TIM3_CH4 */
		};
	};

	m4_tim3_pwm_pins_mx: m4_tim3_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 0, RSVD)>, /* TIM3_CH3 */
					 <STM32_PINMUX('C', 6, RSVD)>, /* TIM3_CH1 */
					 <STM32_PINMUX('C', 7, RSVD)>; /* TIM3_CH2 */
		};
	};

	m4_tim4_pwm_pins_mx: m4_tim4_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 6, RSVD)>, /* TIM4_CH1 */
					 <STM32_PINMUX('D', 13, RSVD)>, /* TIM4_CH2 */
					 <STM32_PINMUX('D', 14, RSVD)>, /* TIM4_CH3 */
					 <STM32_PINMUX('D', 15, RSVD)>; /* TIM4_CH4 */
		};
	};

	m4_tim5_pwm_pins_mx: m4_tim5_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, RSVD)>, /* TIM5_CH1 */
					 <STM32_PINMUX('A', 1, RSVD)>, /* TIM5_CH2 */
					 <STM32_PINMUX('A', 2, RSVD)>, /* TIM5_CH3 */
					 <STM32_PINMUX('A', 3, RSVD)>; /* TIM5_CH4 */
		};
	};

	m4_usart3_pins_mx: m4_usart3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 11, RSVD)>, /* USART3_RX */
					 <STM32_PINMUX('D', 8, RSVD)>; /* USART3_TX */
		};
	};

	m4_usart6_pins_mx: m4_usart6_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 9, RSVD)>, /* USART6_RX */
					 <STM32_PINMUX('G', 14, RSVD)>; /* USART6_TX */
		};
	};

	sdmmc1_pins_mx: sdmmc1_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('D', 2, AF12)>, /* SDMMC1_CMD */
					 <STM32_PINMUX('E', 6, AF8)>; /* SDMMC1_D2 */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('E', 6, AF8)>; /* SDMMC1_D2 */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
					 <STM32_PINMUX('D', 2, ANALOG)>, /* SDMMC1_CMD */
					 <STM32_PINMUX('E', 6, ANALOG)>; /* SDMMC1_D2 */
		};
	};

	uart8_pins_mx: uart8_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 0, AF8)>; /* UART8_RX */
			bias-disable;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 1, AF8)>; /* UART8_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart8_sleep_pins_mx: uart8_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* UART8_RX */
					 <STM32_PINMUX('E', 1, ANALOG)>; /* UART8_TX */
		};
	};

	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&pinctrl_z {
	u-boot,dm-pre-reloc;

	/* USER CODE BEGIN pinctrl_z */
	/* USER CODE END pinctrl_z */
};

&m4_rproc{
	/*Restriction: "memory-region" property is not managed - please to use User-Section if needed*/
	mboxes = <&ipcc 2>;
	mbox-names = "shutdown";
	status = "okay";

	/* USER CODE BEGIN m4_rproc */
	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
			<&vdev0vring1>, <&vdev0buffer>;
	interrupt-parent = <&exti>;
	interrupts = <68 1>;
	wakeup-source;
	/* USER CODE END m4_rproc */

	m4_system_resources{
		status = "okay";

		/* USER CODE BEGIN m4_system_resources */
		/* USER CODE END m4_system_resources */
	};
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 */

	sram = <&dma_pool>;
	
	/* USER CODE END dma1 */
};

&dma2{
	status = "disabled";

	/* USER CODE BEGIN dma2 */
	
	sram = <&dma_pool>;	
	
	/* USER CODE END dma2 */
};

&dmamux1{

	dma-masters = <&dma1>;
	dma-channels = <8>;

	status = "okay";

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&dts{
	status = "okay";

	/* USER CODE BEGIN dts */
	/* USER CODE END dts */
};

&hash1{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN hash1 */
	/* USER CODE END hash1 */
};

&hsem{
	status = "okay";

	/* USER CODE BEGIN hsem */
	/* USER CODE END hsem */
};

&i2c4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins_mx>;
	pinctrl-1 = <&i2c4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c4 */
	
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	clock-frequency = <400000>;
	/delete-property/ dmas;
	/delete-property/ dma-names;

	pmic:stpmic@33{
		compatible = "st,stpmic1";
		reg = <0x33>;
		interrupts-extended = <&exti_pwr 55 IRQ_TYPE_EDGE_FALLING>;
		interrupt-controller;
		#interrupt-cells = <2>;
		status = "okay";

		regulators {
			compatible = "st,stpmic1-regulators";
			buck1-supply = <&vin>;
			buck2-supply = <&vin>;
			buck3-supply = <&vin>;
			buck4-supply = <&vin>;
			ldo1-supply = <&v3v3>;
			ldo2-supply = <&vin>;
			ldo3-supply = <&vdd_ddr>;
			ldo4-supply = <&vin>;
			ldo5-supply = <&vin>;
			ldo6-supply = <&v3v3>;
			vref_ddr-supply = <&vin>;
			boost-supply = <&vin>;
			pwr_sw1-supply = <&bst_out>;
			pwr_sw2-supply = <&bst_out>;

			vddcore: buck1 {
				regulator-name = "vddcore";
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			vdd_ddr: buck2 {
				regulator-name = "vdd_ddr";
				regulator-min-microvolt = <1500000>;
				regulator-max-microvolt = <1500000>;
				regulator-boot-on;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			vdd: buck3 {
				regulator-name = "vdd";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				st,mask-reset;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			v3v3: buck4 {
				regulator-name = "v3v3";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				regulator-over-current-protection;
				regulator-initial-mode = <0>;
			};

			vtt_ddr: ldo3 {
				regulator-name = "vtt_ddr";
				regulator-always-on;
				regulator-over-current-protection;
				st,regulator-sink-source;
			};

			vdd_usb: ldo4 {
				regulator-name = "vdd_usb";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
			};

			vref_ddr: vref_ddr {
				regulator-name = "vref_ddr";
				regulator-always-on;
			};

			bst_out: boost {
				regulator-name = "bst_out";
			};

			vbus_otg: pwr_sw1 {
				regulator-name = "vbus_otg";
			};

			vbus_sw: pwr_sw2 {
				regulator-name = "vbus_sw";
				regulator-active-discharge = <1>;
			};
		};
		
		onkey{
			compatible = "st,stpmic1-onkey"; 
			status = "disabled";
		};

		watchdog{
			compatible = "st,stpmic1-wdt";
			status = "disabled";
		};
	};
	
	/* USER CODE END i2c4 */
};

&ipcc{
	status = "okay";

	/* USER CODE BEGIN ipcc */
	/* USER CODE END ipcc */
};

&iwdg2{
	status = "okay";

	/* USER CODE BEGIN iwdg2 */
	
	timeout-sec = <128>;
	
	/* USER CODE END iwdg2 */
};

&m4_adc{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_adc_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_adc */
	/* USER CODE END m4_adc */
};

&m4_dac{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_dac1_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_dac */
	/* USER CODE END m4_dac */
};

&m4_dma2{
	status = "okay";

	/* USER CODE BEGIN m4_dma2 */
	/* USER CODE END m4_dma2 */
};

&m4_i2c1{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_i2c1_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_i2c1 */
	/* USER CODE END m4_i2c1 */
};

&m4_i2c2{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_i2c2_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_i2c2 */
	/* USER CODE END m4_i2c2 */
};

&m4_i2c5{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_i2c5_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_i2c5 */
	/* USER CODE END m4_i2c5 */
};

&m4_m_can1{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_fdcan1_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_m_can1 */
	/* USER CODE END m4_m_can1 */
};

&m4_m_can2{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_fdcan2_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_m_can2 */
	/* USER CODE END m4_m_can2 */
};

&m4_spi1{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_spi1_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_spi1 */
	/* USER CODE END m4_spi1 */
};

&m4_spi2{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_spi2_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_spi2 */
	/* USER CODE END m4_spi2 */
};

&m4_spi3{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_spi3_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_spi3 */
	/* USER CODE END m4_spi3 */
};

&m4_timers3{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_tim3_pins_mx>, <&m4_tim3_pwm_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_timers3 */
	/* USER CODE END m4_timers3 */
};

&m4_timers4{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_tim4_pwm_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_timers4 */
	/* USER CODE END m4_timers4 */
};

&m4_timers5{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_tim5_pwm_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_timers5 */
	/* USER CODE END m4_timers5 */
};

&m4_usart3{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_usart3_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_usart3 */
	/* USER CODE END m4_usart3 */
};

&m4_usart6{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_usart6_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_usart6 */
	/* USER CODE END m4_usart6 */
};

&mdma1{
	status = "okay";

	/* USER CODE BEGIN mdma1 */
	/* USER CODE END mdma1 */
};

&pwr_regulators{
	status = "okay";

	/* USER CODE BEGIN pwr_regulators */
	
	vdd-supply = <&vdd>;
	vdd_3v3_usbfs-supply = <&vdd_usb>;
	
	/* USER CODE END pwr_regulators */
};

&rcc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

&rtc{
	status = "okay";

	/* USER CODE BEGIN rtc */
	/* USER CODE END rtc */
};

&sdmmc1{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_mx>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc1 */
	
	//cd-gpios = <&gpiob 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // NO SD CARD DETECT
	broken-cd;
	disable-wp;
	st,sig-dir;
	//st,use-ckin;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&v3v3>;
	
	/* USER CODE END sdmmc1 */
};

&tamp{
	status = "okay";

	/* USER CODE BEGIN tamp */
	/* USER CODE END tamp */
};

&uart8{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart8_pins_mx>;
	pinctrl-1 = <&uart8_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart8 */
	/* USER CODE END uart8 */
};

&usbotg_hs{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbotg_hs */
	compatible = "st,stm32mp15-hsotg", "snps,dwc2";
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	dr_mode = "peripheral";
	usb-role-switch;
	role-switch-default-mode = "peripheral";
	vbus-supply = <&vin>;
	
	/* USER CODE END usbotg_hs */
};

&usbphyc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc */
	/* USER CODE END usbphyc */
};

&usbphyc_port0{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc_port0 */
	
	phy-supply = <&vdd_usb>;
	//st,phy-tuning = <&usb_phy_tuning>;
	
	/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc_port1 */
	
	phy-supply = <&vdd_usb>;
	//st,phy-tuning = <&usb_phy_tuning>;
	
	connector {
		compatible = "usb-a-connector";
		vbus-supply = <&vin>;
	};
	
	/* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */

&cpu0{
	cpu-supply = <&vddcore>;
};

&cpu1{
	cpu-supply = <&vddcore>;
};

&sram{

	dma_pool:dma_pool@0{
		reg = <0x50000 0x10000>;
		pool;
	};
};

&adc {
	status = "disabled";
};

&usbh_ohci{
	phys = <&usbphyc_port0>;
};

/* USER CODE END addons */

